buildscript {
	ext.buildProps = file "build.properties"
	buildProps.withReader {
		def prop = new Properties()
		prop.load(it)
		ext.config = new ConfigSlurper().parse prop
	}
	repositories {
		mavenCentral()
	}
}

plugins {
	id "java-library"
	id "maven-publish"
}

repositories {
	mavenCentral()
}

dependencies {
	implementation group: "com.google.code.gson", name: "gson", version: config.gson.version
}

group = "net.hycrafthd"
archivesBaseName = "minecraft_authenticator"
version = "3.0.3"

tasks.withType(JavaCompile) {
	options.encoding = "UTF-8"
}

sourceSets {
	main
	test
}

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
	withSourcesJar()
	withJavadocJar()
}

tasks.named("jar") {
	from "LICENSE"
	
	manifest {
		attributes (
				"Implementation-Version": project.version,
				"Implementation-Vendor": "HyCraftHD, Luc_ZZ",
				"Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
				"Fingerprint": project.findProperty("keystore.fingerprint") ?: "NONE",
				)
	}
}

tasks.create("signJar") {
	dependsOn tasks.named("jar")
	mustRunAfter tasks.named("jar")
	
	enabled = project.hasProperty("createBuild")
	
	def keyStore = project.findProperty("keystore")
	def alias = project.findProperty("keystore.alias")
	def storePass = project.findProperty("keystore.password")
	def keyPass = project.findProperty("keystore.password_key")
	
	doLast {
		ant.signjar(
				keyStore: keyStore,
				alias: alias,
				storepass: storePass,
				keyPass: keyPass,
				jar: tasks.named("jar").get().archiveFile.get(),
				signedJar: tasks.named("jar").get().archiveFile.get()
				)
	}
}

tasks.named("assemble") {
	dependsOn tasks.named("signJar")
}
afterEvaluate {
	tasks.matching { task ->
		task.group == "publishing"
	}.each { task ->
		task.dependsOn("signJar")
	}
}

tasks.withType(PublishToMavenRepository) {
	onlyIf {
		getValue("maven.password") != null
	}
}

publishing {
	repositories {
		maven {
			url "https://repo.u-team.info"
			credentials {
				username = "maven"
				password = getValue("maven.password")
			}
		}
	}
	publications {
		mavenJava(MavenPublication) {
			from components.java
			
			groupId = project.group
			artifactId = project.archivesBaseName
			version = project.version
			
			pom {
				name = project.archivesBaseName
				description = "Minecraft-Authenticator"
				url = "https://github.com/HyCraftHD/Minecraft-Authenticator"
				scm {
					url = "https://github.com/HyCraftHD/Minecraft-Authenticator"
					connection = "scm:git:git://github.com/HyCraftHD/Minecraft-Authenticator.git"
					developerConnection = "scm:git:git@github.com:HyCraftHD/Minecraft-Authenticator.git"
				}
				issueManagement {
					system = "github"
					url = "https://github.com/HyCraftHD/Minecraft-Authenticator/issues"
				}
				licenses {
					license {
						name = "Apache License 2.0"
						url = "https://github.com/HyCraftHD/Minecraft-Authenticator/blob/main/LICENSE"
						distribution = "repo"
					}
				}
				developers {
					developer {
						name = "HyCraftHD"
					}
					developer {
						name = "Luc_ZZ"
					}
				}
			}
		}
	}
}

def getValue(name) {
	def envVariable = System.getenv(name)
	if(envVariable != null) {
		return envVariable
	} else {
		if (project.hasProperty(name)) {
			return project.getProperty(name)
		}
	}
	return null;
}